{
    "sourceFile": "node_modules/react-scripts/config/webpack.config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1695908396240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695908403896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,797 @@\n+// @remove-on-eject-begin\n+/**\n+ * Copyright (c) 2015-present, Facebook, Inc.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+// @remove-on-eject-end\n+'use strict';\n+\n+const fs = require('fs');\n+const path = require('path');\n+const webpack = require('webpack');\n+const resolve = require('resolve');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n+const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\n+const InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin');\n+const TerserPlugin = require('terser-webpack-plugin');\n+const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n+const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n+const { WebpackManifestPlugin } = require('webpack-manifest-plugin');\n+const InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\n+const WorkboxWebpackPlugin = require('workbox-webpack-plugin');\n+const ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');\n+const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');\n+const ESLintPlugin = require('eslint-webpack-plugin');\n+const paths = require('./paths');\n+const modules = require('./modules');\n+const getClientEnvironment = require('./env');\n+const ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');\n+const ForkTsCheckerWebpackPlugin =\n+  process.env.TSC_COMPILE_ON_ERROR === 'true'\n+    ? require('react-dev-utils/ForkTsCheckerWarningWebpackPlugin')\n+    : require('react-dev-utils/ForkTsCheckerWebpackPlugin');\n+const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n+// @remove-on-eject-begin\n+const getCacheIdentifier = require('react-dev-utils/getCacheIdentifier');\n+// @remove-on-eject-end\n+const createEnvironmentHash = require('./webpack/persistentCache/createEnvironmentHash');\n+\n+// Source maps are resource heavy and can cause out of memory issue for large source files.\n+const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';\n+\n+const reactRefreshRuntimeEntry = require.resolve('react-refresh/runtime');\n+const reactRefreshWebpackPluginRuntimeEntry = require.resolve(\n+  '@pmmmwh/react-refresh-webpack-plugin'\n+);\n+const babelRuntimeEntry = require.resolve('babel-preset-react-app');\n+const babelRuntimeEntryHelpers = require.resolve(\n+  '@babel/runtime/helpers/esm/assertThisInitialized',\n+  { paths: [babelRuntimeEntry] }\n+);\n+const babelRuntimeRegenerator = require.resolve('@babel/runtime/regenerator', {\n+  paths: [babelRuntimeEntry],\n+});\n+\n+// Some apps do not need the benefits of saving a web request, so not inlining the chunk\n+// makes for a smoother build process.\n+const shouldInlineRuntimeChunk = process.env.INLINE_RUNTIME_CHUNK !== 'false';\n+\n+const emitErrorsAsWarnings = process.env.ESLINT_NO_DEV_ERRORS === 'true';\n+const disableESLintPlugin = process.env.DISABLE_ESLINT_PLUGIN === 'true';\n+\n+const imageInlineSizeLimit = parseInt(\n+  process.env.IMAGE_INLINE_SIZE_LIMIT || '10000'\n+);\n+\n+// Check if TypeScript is setup\n+const useTypeScript = fs.existsSync(paths.appTsConfig);\n+\n+// Check if Tailwind config exists\n+const useTailwind = fs.existsSync(\n+  path.join(paths.appPath, 'tailwind.config.js')\n+);\n+\n+// Get the path to the uncompiled service worker (if it exists).\n+const swSrc = paths.swSrc;\n+\n+// style files regexes\n+const cssRegex = /\\.css$/;\n+const cssModuleRegex = /\\.module\\.css$/;\n+const sassRegex = /\\.(scss|sass)$/;\n+const sassModuleRegex = /\\.module\\.(scss|sass)$/;\n+\n+const hasJsxRuntime = (() => {\n+  if (process.env.DISABLE_NEW_JSX_TRANSFORM === 'true') {\n+    return false;\n+  }\n+\n+  try {\n+    require.resolve('react/jsx-runtime');\n+    return true;\n+  } catch (e) {\n+    return false;\n+  }\n+})();\n+\n+// This is the production and development configuration.\n+// It is focused on developer experience, fast rebuilds, and a minimal bundle.\n+module.exports = function (webpackEnv) {\n+  const isEnvDevelopment = webpackEnv === 'development';\n+  const isEnvProduction = webpackEnv === 'production';\n+\n+  // Variable used for enabling profiling in Production\n+  // passed into alias object. Uses a flag if passed into the build command\n+  const isEnvProductionProfile =\n+    isEnvProduction && process.argv.includes('--profile');\n+\n+  // We will provide `paths.publicUrlOrPath` to our app\n+  // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n+  // Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\n+  // Get environment variables to inject into our app.\n+  const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));\n+\n+  const shouldUseReactRefresh = env.raw.FAST_REFRESH;\n+\n+  // common function to get style loaders\n+  const getStyleLoaders = (cssOptions, preProcessor) => {\n+    const loaders = [\n+      isEnvDevelopment && require.resolve('style-loader'),\n+      isEnvProduction && {\n+        loader: MiniCssExtractPlugin.loader,\n+        // css is located in `static/css`, use '../../' to locate index.html folder\n+        // in production `paths.publicUrlOrPath` can be a relative path\n+        options: paths.publicUrlOrPath.startsWith('.')\n+          ? { publicPath: '../../' }\n+          : {},\n+      },\n+      {\n+        loader: require.resolve('css-loader'),\n+        options: cssOptions,\n+      },\n+      {\n+        // Options for PostCSS as we reference these options twice\n+        // Adds vendor prefixing based on your specified browser support in\n+        // package.json\n+        loader: require.resolve('postcss-loader'),\n+        options: {\n+          postcssOptions: {\n+            // Necessary for external CSS imports to work\n+            // https://github.com/facebook/create-react-app/issues/2677\n+            ident: 'postcss',\n+            config: false,\n+            plugins: !useTailwind\n+              ? [\n+                  'postcss-flexbugs-fixes',\n+                  [\n+                    'postcss-preset-env',\n+                    {\n+                      autoprefixer: {\n+                        flexbox: 'no-2009',\n+                      },\n+                      stage: 3,\n+                    },\n+                  ],\n+                  // Adds PostCSS Normalize as the reset css with default options,\n+                  // so that it honors browserslist config in package.json\n+                  // which in turn let's users customize the target behavior as per their needs.\n+                  'postcss-normalize',\n+                ]\n+              : [\n+                  'tailwindcss',\n+                  'postcss-flexbugs-fixes',\n+                  [\n+                    'postcss-preset-env',\n+                    {\n+                      autoprefixer: {\n+                        flexbox: 'no-2009',\n+                      },\n+                      stage: 3,\n+                    },\n+                  ],\n+                ],\n+          },\n+          sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n+        },\n+      },\n+    ].filter(Boolean);\n+    if (preProcessor) {\n+      loaders.push(\n+        {\n+          loader: require.resolve('resolve-url-loader'),\n+          options: {\n+            sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n+            root: paths.appSrc,\n+          },\n+        },\n+        {\n+          loader: require.resolve(preProcessor),\n+          options: {\n+            sourceMap: true,\n+          },\n+        }\n+      );\n+    }\n+    return loaders;\n+  };\n+\n+  return {\n+    target: ['browserslist'],\n+    // Webpack noise constrained to errors and warnings\n+    stats: 'errors-warnings',\n+    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',\n+    // Stop compilation early in production\n+    bail: isEnvProduction,\n+    devtool: isEnvProduction\n+      ? shouldUseSourceMap\n+        ? 'source-map'\n+        : false\n+      : isEnvDevelopment && 'cheap-module-source-map',\n+    // These are the \"entry points\" to our application.\n+    // This means they will be the \"root\" imports that are included in JS bundle.\n+    entry: paths.appIndexJs,\n+    output: {\n+      // The build folder.\n+      path: paths.appBuild,\n+      // Add /* filename */ comments to generated require()s in the output.\n+      pathinfo: isEnvDevelopment,\n+      // There will be one main bundle, and one file per asynchronous chunk.\n+      // In development, it does not produce real files.\n+      filename: isEnvProduction\n+        ? 'static/js/[name].[contenthash:8].js'\n+        : isEnvDevelopment && 'static/js/bundle.js',\n+      // There are also additional JS chunk files if you use code splitting.\n+      chunkFilename: isEnvProduction\n+        ? 'static/js/[name].[contenthash:8].chunk.js'\n+        : isEnvDevelopment && 'static/js/[name].chunk.js',\n+      assetModuleFilename: 'static/media/[name].[hash][ext]',\n+      // webpack uses `publicPath` to determine where the app is being served from.\n+      // It requires a trailing slash, or the file assets will get an incorrect path.\n+      // We inferred the \"public path\" (such as / or /my-project) from homepage.\n+      publicPath: paths.publicUrlOrPath,\n+      // Point sourcemap entries to original disk location (format as URL on Windows)\n+      devtoolModuleFilenameTemplate: isEnvProduction\n+        ? info =>\n+            path\n+              .relative(paths.appSrc, info.absoluteResourcePath)\n+              .replace(/\\\\/g, '/')\n+        : isEnvDevelopment &&\n+          (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\n+    },\n+    cache: {\n+      type: 'filesystem',\n+      version: createEnvironmentHash(env.raw),\n+      cacheDirectory: paths.appWebpackCache,\n+      store: 'pack',\n+      buildDependencies: {\n+        defaultWebpack: ['webpack/lib/'],\n+        config: [__filename],\n+        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>\n+          fs.existsSync(f)\n+        ),\n+      },\n+    },\n+    infrastructureLogging: {\n+      level: 'none',\n+    },\n+    optimization: {\n+      minimize: isEnvProduction,\n+      minimizer: [\n+        // This is only used in production mode\n+        new TerserPlugin({\n+          terserOptions: {\n+            parse: {\n+              // We want terser to parse ecma 8 code. However, we don't want it\n+              // to apply any minification steps that turns valid ecma 5 code\n+              // into invalid ecma 5 code. This is why the 'compress' and 'output'\n+              // sections only apply transformations that are ecma 5 safe\n+              // https://github.com/facebook/create-react-app/pull/4234\n+              ecma: 8,\n+            },\n+            compress: {\n+              ecma: 5,\n+              warnings: false,\n+              // Disabled because of an issue with Uglify breaking seemingly valid code:\n+              // https://github.com/facebook/create-react-app/issues/2376\n+              // Pending further investigation:\n+              // https://github.com/mishoo/UglifyJS2/issues/2011\n+              comparisons: false,\n+              // Disabled because of an issue with Terser breaking valid code:\n+              // https://github.com/facebook/create-react-app/issues/5250\n+              // Pending further investigation:\n+              // https://github.com/terser-js/terser/issues/120\n+              inline: 2,\n+            },\n+            mangle: {\n+              safari10: true,\n+            },\n+            // Added for profiling in devtools\n+            keep_classnames: isEnvProductionProfile,\n+            keep_fnames: isEnvProductionProfile,\n+            output: {\n+              ecma: 5,\n+              comments: false,\n+              // Turned on because emoji and regex is not minified properly using default\n+              // https://github.com/facebook/create-react-app/issues/2488\n+              ascii_only: true,\n+            },\n+          },\n+        }),\n+        // This is only used in production mode\n+        new CssMinimizerPlugin(),\n+      ],\n+    },\n+    resolve: {\n+      // This allows you to set a fallback for where webpack should look for modules.\n+      // We placed these paths second because we want `node_modules` to \"win\"\n+      // if there are any conflicts. This matches Node resolution mechanism.\n+      // https://github.com/facebook/create-react-app/issues/253\n+      fallback\n+      modules: ['node_modules', paths.appNodeModules].concat(\n+        modules.additionalModulePaths || []\n+      ),\n+      // These are the reasonable defaults supported by the Node ecosystem.\n+      // We also include JSX as a common component filename extension to support\n+      // some tools, although we do not recommend using it, see:\n+      // https://github.com/facebook/create-react-app/issues/290\n+      // `web` extension prefixes have been added for better support\n+      // for React Native Web.\n+      extensions: paths.moduleFileExtensions\n+        .map(ext => `.${ext}`)\n+        .filter(ext => useTypeScript || !ext.includes('ts')),\n+      alias: {\n+        // Support React Native Web\n+        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n+        'react-native': 'react-native-web',\n+        // Allows for better profiling with ReactDevTools\n+        ...(isEnvProductionProfile && {\n+          'react-dom$': 'react-dom/profiling',\n+          'scheduler/tracing': 'scheduler/tracing-profiling',\n+        }),\n+        ...(modules.webpackAliases || {}),\n+      },\n+      plugins: [\n+        // Prevents users from importing files from outside of src/ (or node_modules/).\n+        // This often causes confusion because we only process files within src/ with babel.\n+        // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\n+        // please link the files into your node_modules/ and let module-resolution kick in.\n+        // Make sure your source files are compiled, as they will not be processed in any way.\n+        new ModuleScopePlugin(paths.appSrc, [\n+          paths.appPackageJson,\n+          reactRefreshRuntimeEntry,\n+          reactRefreshWebpackPluginRuntimeEntry,\n+          babelRuntimeEntry,\n+          babelRuntimeEntryHelpers,\n+          babelRuntimeRegenerator,\n+        ]),\n+      ],\n+    },\n+    module: {\n+      strictExportPresence: true,\n+      rules: [\n+        // Handle node_modules packages that contain sourcemaps\n+        shouldUseSourceMap && {\n+          enforce: 'pre',\n+          exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n+          test: /\\.(js|mjs|jsx|ts|tsx|css)$/,\n+          loader: require.resolve('source-map-loader'),\n+        },\n+        {\n+          // \"oneOf\" will traverse all following loaders until one will\n+          // match the requirements. When no loader matches it will fall\n+          // back to the \"file\" loader at the end of the loader list.\n+          oneOf: [\n+            // TODO: Merge this config once `image/avif` is in the mime-db\n+            // https://github.com/jshttp/mime-db\n+            {\n+              test: [/\\.avif$/],\n+              type: 'asset',\n+              mimetype: 'image/avif',\n+              parser: {\n+                dataUrlCondition: {\n+                  maxSize: imageInlineSizeLimit,\n+                },\n+              },\n+            },\n+            // \"url\" loader works like \"file\" loader except that it embeds assets\n+            // smaller than specified limit in bytes as data URLs to avoid requests.\n+            // A missing `test` is equivalent to a match.\n+            {\n+              test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n+              type: 'asset',\n+              parser: {\n+                dataUrlCondition: {\n+                  maxSize: imageInlineSizeLimit,\n+                },\n+              },\n+            },\n+            {\n+              test: /\\.svg$/,\n+              use: [\n+                {\n+                  loader: require.resolve('@svgr/webpack'),\n+                  options: {\n+                    prettier: false,\n+                    svgo: false,\n+                    svgoConfig: {\n+                      plugins: [{ removeViewBox: false }],\n+                    },\n+                    titleProp: true,\n+                    ref: true,\n+                  },\n+                },\n+                {\n+                  loader: require.resolve('file-loader'),\n+                  options: {\n+                    name: 'static/media/[name].[hash].[ext]',\n+                  },\n+                },\n+              ],\n+              issuer: {\n+                and: [/\\.(ts|tsx|js|jsx|md|mdx)$/],\n+              },\n+            },\n+            // Process application JS with Babel.\n+            // The preset includes JSX, Flow, TypeScript, and some ESnext features.\n+            {\n+              test: /\\.(js|mjs|jsx|ts|tsx)$/,\n+              include: paths.appSrc,\n+              loader: require.resolve('babel-loader'),\n+              options: {\n+                customize: require.resolve(\n+                  'babel-preset-react-app/webpack-overrides'\n+                ),\n+                presets: [\n+                  [\n+                    require.resolve('babel-preset-react-app'),\n+                    {\n+                      runtime: hasJsxRuntime ? 'automatic' : 'classic',\n+                    },\n+                  ],\n+                ],\n+                // @remove-on-eject-begin\n+                babelrc: false,\n+                configFile: false,\n+                // Make sure we have a unique cache identifier, erring on the\n+                // side of caution.\n+                // We remove this when the user ejects because the default\n+                // is sane and uses Babel options. Instead of options, we use\n+                // the react-scripts and babel-preset-react-app versions.\n+                cacheIdentifier: getCacheIdentifier(\n+                  isEnvProduction\n+                    ? 'production'\n+                    : isEnvDevelopment && 'development',\n+                  [\n+                    'babel-plugin-named-asset-import',\n+                    'babel-preset-react-app',\n+                    'react-dev-utils',\n+                    'react-scripts',\n+                  ]\n+                ),\n+                // @remove-on-eject-end\n+                plugins: [\n+                  isEnvDevelopment &&\n+                    shouldUseReactRefresh &&\n+                    require.resolve('react-refresh/babel'),\n+                ].filter(Boolean),\n+                // This is a feature of `babel-loader` for webpack (not Babel itself).\n+                // It enables caching results in ./node_modules/.cache/babel-loader/\n+                // directory for faster rebuilds.\n+                cacheDirectory: true,\n+                // See #6846 for context on why cacheCompression is disabled\n+                cacheCompression: false,\n+                compact: isEnvProduction,\n+              },\n+            },\n+            // Process any JS outside of the app with Babel.\n+            // Unlike the application JS, we only compile the standard ES features.\n+            {\n+              test: /\\.(js|mjs)$/,\n+              exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n+              loader: require.resolve('babel-loader'),\n+              options: {\n+                babelrc: false,\n+                configFile: false,\n+                compact: false,\n+                presets: [\n+                  [\n+                    require.resolve('babel-preset-react-app/dependencies'),\n+                    { helpers: true },\n+                  ],\n+                ],\n+                cacheDirectory: true,\n+                // See #6846 for context on why cacheCompression is disabled\n+                cacheCompression: false,\n+                // @remove-on-eject-begin\n+                cacheIdentifier: getCacheIdentifier(\n+                  isEnvProduction\n+                    ? 'production'\n+                    : isEnvDevelopment && 'development',\n+                  [\n+                    'babel-plugin-named-asset-import',\n+                    'babel-preset-react-app',\n+                    'react-dev-utils',\n+                    'react-scripts',\n+                  ]\n+                ),\n+                // @remove-on-eject-end\n+                // Babel sourcemaps are needed for debugging into node_modules\n+                // code.  Without the options below, debuggers like VSCode\n+                // show incorrect code and set breakpoints on the wrong lines.\n+                sourceMaps: shouldUseSourceMap,\n+                inputSourceMap: shouldUseSourceMap,\n+              },\n+            },\n+            // \"postcss\" loader applies autoprefixer to our CSS.\n+            // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n+            // \"style\" loader turns CSS into JS modules that inject <style> tags.\n+            // In production, we use MiniCSSExtractPlugin to extract that CSS\n+            // to a file, but in development \"style\" loader enables hot editing\n+            // of CSS.\n+            // By default we support CSS Modules with the extension .module.css\n+            {\n+              test: cssRegex,\n+              exclude: cssModuleRegex,\n+              use: getStyleLoaders({\n+                importLoaders: 1,\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                modules: {\n+                  mode: 'icss',\n+                },\n+              }),\n+              // Don't consider CSS imports dead code even if the\n+              // containing package claims to have no side effects.\n+              // Remove this when webpack adds a warning or an error for this.\n+              // See https://github.com/webpack/webpack/issues/6571\n+              sideEffects: true,\n+            },\n+            // Adds support for CSS Modules (https://github.com/css-modules/css-modules)\n+            // using the extension .module.css\n+            {\n+              test: cssModuleRegex,\n+              use: getStyleLoaders({\n+                importLoaders: 1,\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                modules: {\n+                  mode: 'local',\n+                  getLocalIdent: getCSSModuleLocalIdent,\n+                },\n+              }),\n+            },\n+            // Opt-in support for SASS (using .scss or .sass extensions).\n+            // By default we support SASS Modules with the\n+            // extensions .module.scss or .module.sass\n+            {\n+              test: sassRegex,\n+              exclude: sassModuleRegex,\n+              use: getStyleLoaders(\n+                {\n+                  importLoaders: 3,\n+                  sourceMap: isEnvProduction\n+                    ? shouldUseSourceMap\n+                    : isEnvDevelopment,\n+                  modules: {\n+                    mode: 'icss',\n+                  },\n+                },\n+                'sass-loader'\n+              ),\n+              // Don't consider CSS imports dead code even if the\n+              // containing package claims to have no side effects.\n+              // Remove this when webpack adds a warning or an error for this.\n+              // See https://github.com/webpack/webpack/issues/6571\n+              sideEffects: true,\n+            },\n+            // Adds support for CSS Modules, but using SASS\n+            // using the extension .module.scss or .module.sass\n+            {\n+              test: sassModuleRegex,\n+              use: getStyleLoaders(\n+                {\n+                  importLoaders: 3,\n+                  sourceMap: isEnvProduction\n+                    ? shouldUseSourceMap\n+                    : isEnvDevelopment,\n+                  modules: {\n+                    mode: 'local',\n+                    getLocalIdent: getCSSModuleLocalIdent,\n+                  },\n+                },\n+                'sass-loader'\n+              ),\n+            },\n+            // \"file\" loader makes sure those assets get served by WebpackDevServer.\n+            // When you `import` an asset, you get its (virtual) filename.\n+            // In production, they would get copied to the `build` folder.\n+            // This loader doesn't use a \"test\" so it will catch all modules\n+            // that fall through the other loaders.\n+            {\n+              // Exclude `js` files to keep \"css\" loader working as it injects\n+              // its runtime that would otherwise be processed through \"file\" loader.\n+              // Also exclude `html` and `json` extensions so they get processed\n+              // by webpacks internal loaders.\n+              exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n+              type: 'asset/resource',\n+            },\n+            // ** STOP ** Are you adding a new loader?\n+            // Make sure to add the new loader(s) before the \"file\" loader.\n+          ],\n+        },\n+      ].filter(Boolean),\n+    },\n+    plugins: [\n+      // Generates an `index.html` file with the <script> injected.\n+      new HtmlWebpackPlugin(\n+        Object.assign(\n+          {},\n+          {\n+            inject: true,\n+            template: paths.appHtml,\n+          },\n+          isEnvProduction\n+            ? {\n+                minify: {\n+                  removeComments: true,\n+                  collapseWhitespace: true,\n+                  removeRedundantAttributes: true,\n+                  useShortDoctype: true,\n+                  removeEmptyAttributes: true,\n+                  removeStyleLinkTypeAttributes: true,\n+                  keepClosingSlash: true,\n+                  minifyJS: true,\n+                  minifyCSS: true,\n+                  minifyURLs: true,\n+                },\n+              }\n+            : undefined\n+        )\n+      ),\n+      // Inlines the webpack runtime script. This script is too small to warrant\n+      // a network request.\n+      // https://github.com/facebook/create-react-app/issues/5358\n+      isEnvProduction &&\n+        shouldInlineRuntimeChunk &&\n+        new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime-.+[.]js/]),\n+      // Makes some environment variables available in index.html.\n+      // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n+      // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n+      // It will be an empty string unless you specify \"homepage\"\n+      // in `package.json`, in which case it will be the pathname of that URL.\n+      new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\n+      // This gives some necessary context to module not found errors, such as\n+      // the requesting resource.\n+      new ModuleNotFoundPlugin(paths.appPath),\n+      // Makes some environment variables available to the JS code, for example:\n+      // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n+      // It is absolutely essential that NODE_ENV is set to production\n+      // during a production build.\n+      // Otherwise React will be compiled in the very slow development mode.\n+      new webpack.DefinePlugin(env.stringified),\n+      // Experimental hot reloading for React .\n+      // https://github.com/facebook/react/tree/main/packages/react-refresh\n+      isEnvDevelopment &&\n+        shouldUseReactRefresh &&\n+        new ReactRefreshWebpackPlugin({\n+          overlay: false,\n+        }),\n+      // Watcher doesn't work well if you mistype casing in a path so we use\n+      // a plugin that prints an error when you attempt to do this.\n+      // See https://github.com/facebook/create-react-app/issues/240\n+      isEnvDevelopment && new CaseSensitivePathsPlugin(),\n+      isEnvProduction &&\n+        new MiniCssExtractPlugin({\n+          // Options similar to the same options in webpackOptions.output\n+          // both options are optional\n+          filename: 'static/css/[name].[contenthash:8].css',\n+          chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n+        }),\n+      // Generate an asset manifest file with the following content:\n+      // - \"files\" key: Mapping of all asset filenames to their corresponding\n+      //   output file so that tools can pick it up without having to parse\n+      //   `index.html`\n+      // - \"entrypoints\" key: Array of files which are included in `index.html`,\n+      //   can be used to reconstruct the HTML if necessary\n+      new WebpackManifestPlugin({\n+        fileName: 'asset-manifest.json',\n+        publicPath: paths.publicUrlOrPath,\n+        generate: (seed, files, entrypoints) => {\n+          const manifestFiles = files.reduce((manifest, file) => {\n+            manifest[file.name] = file.path;\n+            return manifest;\n+          }, seed);\n+          const entrypointFiles = entrypoints.main.filter(\n+            fileName => !fileName.endsWith('.map')\n+          );\n+\n+          return {\n+            files: manifestFiles,\n+            entrypoints: entrypointFiles,\n+          };\n+        },\n+      }),\n+      // Moment.js is an extremely popular library that bundles large locale files\n+      // by default due to how webpack interprets its code. This is a practical\n+      // solution that requires the user to opt into importing specific locales.\n+      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\n+      // You can remove this if you don't use Moment.js:\n+      new webpack.IgnorePlugin({\n+        resourceRegExp: /^\\.\\/locale$/,\n+        contextRegExp: /moment$/,\n+      }),\n+      // Generate a service worker script that will precache, and keep up to date,\n+      // the HTML & assets that are part of the webpack build.\n+      isEnvProduction &&\n+        fs.existsSync(swSrc) &&\n+        new WorkboxWebpackPlugin.InjectManifest({\n+          swSrc,\n+          dontCacheBustURLsMatching: /\\.[0-9a-f]{8}\\./,\n+          exclude: [/\\.map$/, /asset-manifest\\.json$/, /LICENSE/],\n+          // Bump up the default maximum size (2mb) that's precached,\n+          // to make lazy-loading failure scenarios less likely.\n+          // See https://github.com/cra-template/pwa/issues/13#issuecomment-722667270\n+          maximumFileSizeToCacheInBytes: 5 * 1024 * 1024,\n+        }),\n+      // TypeScript type checking\n+      useTypeScript &&\n+        new ForkTsCheckerWebpackPlugin({\n+          async: isEnvDevelopment,\n+          typescript: {\n+            typescriptPath: resolve.sync('typescript', {\n+              basedir: paths.appNodeModules,\n+            }),\n+            configOverwrite: {\n+              compilerOptions: {\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                skipLibCheck: true,\n+                inlineSourceMap: false,\n+                declarationMap: false,\n+                noEmit: true,\n+                incremental: true,\n+                tsBuildInfoFile: paths.appTsBuildInfoFile,\n+              },\n+            },\n+            context: paths.appPath,\n+            diagnosticOptions: {\n+              syntactic: true,\n+            },\n+            mode: 'write-references',\n+            // profile: true,\n+          },\n+          issue: {\n+            // This one is specifically to match during CI tests,\n+            // as micromatch doesn't match\n+            // '../cra-template-typescript/template/src/App.tsx'\n+            // otherwise.\n+            include: [\n+              { file: '../**/src/**/*.{ts,tsx}' },\n+              { file: '**/src/**/*.{ts,tsx}' },\n+            ],\n+            exclude: [\n+              { file: '**/src/**/__tests__/**' },\n+              { file: '**/src/**/?(*.){spec|test}.*' },\n+              { file: '**/src/setupProxy.*' },\n+              { file: '**/src/setupTests.*' },\n+            ],\n+          },\n+          logger: {\n+            infrastructure: 'silent',\n+          },\n+        }),\n+      !disableESLintPlugin &&\n+        new ESLintPlugin({\n+          // Plugin options\n+          extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],\n+          formatter: require.resolve('react-dev-utils/eslintFormatter'),\n+          eslintPath: require.resolve('eslint'),\n+          failOnError: !(isEnvDevelopment && emitErrorsAsWarnings),\n+          context: paths.appSrc,\n+          cache: true,\n+          cacheLocation: path.resolve(\n+            paths.appNodeModules,\n+            '.cache/.eslintcache'\n+          ),\n+          // ESLint class options\n+          cwd: paths.appPath,\n+          resolvePluginsRelativeTo: __dirname,\n+          baseConfig: {\n+            extends: [require.resolve('eslint-config-react-app/base')],\n+            rules: {\n+              ...(!hasJsxRuntime && {\n+                'react/react-in-jsx-scope': 'error',\n+              }),\n+            },\n+          },\n+        }),\n+    ].filter(Boolean),\n+    // Turn off performance processing because we utilize\n+    // our own hints via the FileSizeReporter\n+    performance: false,\n+  };\n+};\n"
                },
                {
                    "date": 1695908410133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,799 @@\n+// @remove-on-eject-begin\n+/**\n+ * Copyright (c) 2015-present, Facebook, Inc.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+// @remove-on-eject-end\n+'use strict';\n+\n+const fs = require('fs');\n+const path = require('path');\n+const webpack = require('webpack');\n+const resolve = require('resolve');\n+const HtmlWebpackPlugin = require('html-webpack-plugin');\n+const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\n+const InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin');\n+const TerserPlugin = require('terser-webpack-plugin');\n+const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n+const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\n+const { WebpackManifestPlugin } = require('webpack-manifest-plugin');\n+const InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\n+const WorkboxWebpackPlugin = require('workbox-webpack-plugin');\n+const ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');\n+const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');\n+const ESLintPlugin = require('eslint-webpack-plugin');\n+const paths = require('./paths');\n+const modules = require('./modules');\n+const getClientEnvironment = require('./env');\n+const ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');\n+const ForkTsCheckerWebpackPlugin =\n+  process.env.TSC_COMPILE_ON_ERROR === 'true'\n+    ? require('react-dev-utils/ForkTsCheckerWarningWebpackPlugin')\n+    : require('react-dev-utils/ForkTsCheckerWebpackPlugin');\n+const ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n+// @remove-on-eject-begin\n+const getCacheIdentifier = require('react-dev-utils/getCacheIdentifier');\n+// @remove-on-eject-end\n+const createEnvironmentHash = require('./webpack/persistentCache/createEnvironmentHash');\n+\n+// Source maps are resource heavy and can cause out of memory issue for large source files.\n+const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';\n+\n+const reactRefreshRuntimeEntry = require.resolve('react-refresh/runtime');\n+const reactRefreshWebpackPluginRuntimeEntry = require.resolve(\n+  '@pmmmwh/react-refresh-webpack-plugin'\n+);\n+const babelRuntimeEntry = require.resolve('babel-preset-react-app');\n+const babelRuntimeEntryHelpers = require.resolve(\n+  '@babel/runtime/helpers/esm/assertThisInitialized',\n+  { paths: [babelRuntimeEntry] }\n+);\n+const babelRuntimeRegenerator = require.resolve('@babel/runtime/regenerator', {\n+  paths: [babelRuntimeEntry],\n+});\n+\n+// Some apps do not need the benefits of saving a web request, so not inlining the chunk\n+// makes for a smoother build process.\n+const shouldInlineRuntimeChunk = process.env.INLINE_RUNTIME_CHUNK !== 'false';\n+\n+const emitErrorsAsWarnings = process.env.ESLINT_NO_DEV_ERRORS === 'true';\n+const disableESLintPlugin = process.env.DISABLE_ESLINT_PLUGIN === 'true';\n+\n+const imageInlineSizeLimit = parseInt(\n+  process.env.IMAGE_INLINE_SIZE_LIMIT || '10000'\n+);\n+\n+// Check if TypeScript is setup\n+const useTypeScript = fs.existsSync(paths.appTsConfig);\n+\n+// Check if Tailwind config exists\n+const useTailwind = fs.existsSync(\n+  path.join(paths.appPath, 'tailwind.config.js')\n+);\n+\n+// Get the path to the uncompiled service worker (if it exists).\n+const swSrc = paths.swSrc;\n+\n+// style files regexes\n+const cssRegex = /\\.css$/;\n+const cssModuleRegex = /\\.module\\.css$/;\n+const sassRegex = /\\.(scss|sass)$/;\n+const sassModuleRegex = /\\.module\\.(scss|sass)$/;\n+\n+const hasJsxRuntime = (() => {\n+  if (process.env.DISABLE_NEW_JSX_TRANSFORM === 'true') {\n+    return false;\n+  }\n+\n+  try {\n+    require.resolve('react/jsx-runtime');\n+    return true;\n+  } catch (e) {\n+    return false;\n+  }\n+})();\n+\n+// This is the production and development configuration.\n+// It is focused on developer experience, fast rebuilds, and a minimal bundle.\n+module.exports = function (webpackEnv) {\n+  const isEnvDevelopment = webpackEnv === 'development';\n+  const isEnvProduction = webpackEnv === 'production';\n+\n+  // Variable used for enabling profiling in Production\n+  // passed into alias object. Uses a flag if passed into the build command\n+  const isEnvProductionProfile =\n+    isEnvProduction && process.argv.includes('--profile');\n+\n+  // We will provide `paths.publicUrlOrPath` to our app\n+  // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n+  // Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\n+  // Get environment variables to inject into our app.\n+  const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));\n+\n+  const shouldUseReactRefresh = env.raw.FAST_REFRESH;\n+\n+  // common function to get style loaders\n+  const getStyleLoaders = (cssOptions, preProcessor) => {\n+    const loaders = [\n+      isEnvDevelopment && require.resolve('style-loader'),\n+      isEnvProduction && {\n+        loader: MiniCssExtractPlugin.loader,\n+        // css is located in `static/css`, use '../../' to locate index.html folder\n+        // in production `paths.publicUrlOrPath` can be a relative path\n+        options: paths.publicUrlOrPath.startsWith('.')\n+          ? { publicPath: '../../' }\n+          : {},\n+      },\n+      {\n+        loader: require.resolve('css-loader'),\n+        options: cssOptions,\n+      },\n+      {\n+        // Options for PostCSS as we reference these options twice\n+        // Adds vendor prefixing based on your specified browser support in\n+        // package.json\n+        loader: require.resolve('postcss-loader'),\n+        options: {\n+          postcssOptions: {\n+            // Necessary for external CSS imports to work\n+            // https://github.com/facebook/create-react-app/issues/2677\n+            ident: 'postcss',\n+            config: false,\n+            plugins: !useTailwind\n+              ? [\n+                  'postcss-flexbugs-fixes',\n+                  [\n+                    'postcss-preset-env',\n+                    {\n+                      autoprefixer: {\n+                        flexbox: 'no-2009',\n+                      },\n+                      stage: 3,\n+                    },\n+                  ],\n+                  // Adds PostCSS Normalize as the reset css with default options,\n+                  // so that it honors browserslist config in package.json\n+                  // which in turn let's users customize the target behavior as per their needs.\n+                  'postcss-normalize',\n+                ]\n+              : [\n+                  'tailwindcss',\n+                  'postcss-flexbugs-fixes',\n+                  [\n+                    'postcss-preset-env',\n+                    {\n+                      autoprefixer: {\n+                        flexbox: 'no-2009',\n+                      },\n+                      stage: 3,\n+                    },\n+                  ],\n+                ],\n+          },\n+          sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n+        },\n+      },\n+    ].filter(Boolean);\n+    if (preProcessor) {\n+      loaders.push(\n+        {\n+          loader: require.resolve('resolve-url-loader'),\n+          options: {\n+            sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n+            root: paths.appSrc,\n+          },\n+        },\n+        {\n+          loader: require.resolve(preProcessor),\n+          options: {\n+            sourceMap: true,\n+          },\n+        }\n+      );\n+    }\n+    return loaders;\n+  };\n+\n+  return {\n+    target: ['browserslist'],\n+    // Webpack noise constrained to errors and warnings\n+    stats: 'errors-warnings',\n+    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',\n+    // Stop compilation early in production\n+    bail: isEnvProduction,\n+    devtool: isEnvProduction\n+      ? shouldUseSourceMap\n+        ? 'source-map'\n+        : false\n+      : isEnvDevelopment && 'cheap-module-source-map',\n+    // These are the \"entry points\" to our application.\n+    // This means they will be the \"root\" imports that are included in JS bundle.\n+    entry: paths.appIndexJs,\n+    output: {\n+      // The build folder.\n+      path: paths.appBuild,\n+      // Add /* filename */ comments to generated require()s in the output.\n+      pathinfo: isEnvDevelopment,\n+      // There will be one main bundle, and one file per asynchronous chunk.\n+      // In development, it does not produce real files.\n+      filename: isEnvProduction\n+        ? 'static/js/[name].[contenthash:8].js'\n+        : isEnvDevelopment && 'static/js/bundle.js',\n+      // There are also additional JS chunk files if you use code splitting.\n+      chunkFilename: isEnvProduction\n+        ? 'static/js/[name].[contenthash:8].chunk.js'\n+        : isEnvDevelopment && 'static/js/[name].chunk.js',\n+      assetModuleFilename: 'static/media/[name].[hash][ext]',\n+      // webpack uses `publicPath` to determine where the app is being served from.\n+      // It requires a trailing slash, or the file assets will get an incorrect path.\n+      // We inferred the \"public path\" (such as / or /my-project) from homepage.\n+      publicPath: paths.publicUrlOrPath,\n+      // Point sourcemap entries to original disk location (format as URL on Windows)\n+      devtoolModuleFilenameTemplate: isEnvProduction\n+        ? info =>\n+            path\n+              .relative(paths.appSrc, info.absoluteResourcePath)\n+              .replace(/\\\\/g, '/')\n+        : isEnvDevelopment &&\n+          (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\n+    },\n+    cache: {\n+      type: 'filesystem',\n+      version: createEnvironmentHash(env.raw),\n+      cacheDirectory: paths.appWebpackCache,\n+      store: 'pack',\n+      buildDependencies: {\n+        defaultWebpack: ['webpack/lib/'],\n+        config: [__filename],\n+        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>\n+          fs.existsSync(f)\n+        ),\n+      },\n+    },\n+    infrastructureLogging: {\n+      level: 'none',\n+    },\n+    optimization: {\n+      minimize: isEnvProduction,\n+      minimizer: [\n+        // This is only used in production mode\n+        new TerserPlugin({\n+          terserOptions: {\n+            parse: {\n+              // We want terser to parse ecma 8 code. However, we don't want it\n+              // to apply any minification steps that turns valid ecma 5 code\n+              // into invalid ecma 5 code. This is why the 'compress' and 'output'\n+              // sections only apply transformations that are ecma 5 safe\n+              // https://github.com/facebook/create-react-app/pull/4234\n+              ecma: 8,\n+            },\n+            compress: {\n+              ecma: 5,\n+              warnings: false,\n+              // Disabled because of an issue with Uglify breaking seemingly valid code:\n+              // https://github.com/facebook/create-react-app/issues/2376\n+              // Pending further investigation:\n+              // https://github.com/mishoo/UglifyJS2/issues/2011\n+              comparisons: false,\n+              // Disabled because of an issue with Terser breaking valid code:\n+              // https://github.com/facebook/create-react-app/issues/5250\n+              // Pending further investigation:\n+              // https://github.com/terser-js/terser/issues/120\n+              inline: 2,\n+            },\n+            mangle: {\n+              safari10: true,\n+            },\n+            // Added for profiling in devtools\n+            keep_classnames: isEnvProductionProfile,\n+            keep_fnames: isEnvProductionProfile,\n+            output: {\n+              ecma: 5,\n+              comments: false,\n+              // Turned on because emoji and regex is not minified properly using default\n+              // https://github.com/facebook/create-react-app/issues/2488\n+              ascii_only: true,\n+            },\n+          },\n+        }),\n+        // This is only used in production mode\n+        new CssMinimizerPlugin(),\n+      ],\n+    },\n+    resolve: {\n+      // This allows you to set a fallback for where webpack should look for modules.\n+      // We placed these paths second because we want `node_modules` to \"win\"\n+      // if there are any conflicts. This matches Node resolution mechanism.\n+      // https://github.com/facebook/create-react-app/issues/253\n+      fallback: {\n+        \"fs\"\n+      }\n+      modules: ['node_modules', paths.appNodeModules].concat(\n+        modules.additionalModulePaths || []\n+      ),\n+      // These are the reasonable defaults supported by the Node ecosystem.\n+      // We also include JSX as a common component filename extension to support\n+      // some tools, although we do not recommend using it, see:\n+      // https://github.com/facebook/create-react-app/issues/290\n+      // `web` extension prefixes have been added for better support\n+      // for React Native Web.\n+      extensions: paths.moduleFileExtensions\n+        .map(ext => `.${ext}`)\n+        .filter(ext => useTypeScript || !ext.includes('ts')),\n+      alias: {\n+        // Support React Native Web\n+        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n+        'react-native': 'react-native-web',\n+        // Allows for better profiling with ReactDevTools\n+        ...(isEnvProductionProfile && {\n+          'react-dom$': 'react-dom/profiling',\n+          'scheduler/tracing': 'scheduler/tracing-profiling',\n+        }),\n+        ...(modules.webpackAliases || {}),\n+      },\n+      plugins: [\n+        // Prevents users from importing files from outside of src/ (or node_modules/).\n+        // This often causes confusion because we only process files within src/ with babel.\n+        // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\n+        // please link the files into your node_modules/ and let module-resolution kick in.\n+        // Make sure your source files are compiled, as they will not be processed in any way.\n+        new ModuleScopePlugin(paths.appSrc, [\n+          paths.appPackageJson,\n+          reactRefreshRuntimeEntry,\n+          reactRefreshWebpackPluginRuntimeEntry,\n+          babelRuntimeEntry,\n+          babelRuntimeEntryHelpers,\n+          babelRuntimeRegenerator,\n+        ]),\n+      ],\n+    },\n+    module: {\n+      strictExportPresence: true,\n+      rules: [\n+        // Handle node_modules packages that contain sourcemaps\n+        shouldUseSourceMap && {\n+          enforce: 'pre',\n+          exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n+          test: /\\.(js|mjs|jsx|ts|tsx|css)$/,\n+          loader: require.resolve('source-map-loader'),\n+        },\n+        {\n+          // \"oneOf\" will traverse all following loaders until one will\n+          // match the requirements. When no loader matches it will fall\n+          // back to the \"file\" loader at the end of the loader list.\n+          oneOf: [\n+            // TODO: Merge this config once `image/avif` is in the mime-db\n+            // https://github.com/jshttp/mime-db\n+            {\n+              test: [/\\.avif$/],\n+              type: 'asset',\n+              mimetype: 'image/avif',\n+              parser: {\n+                dataUrlCondition: {\n+                  maxSize: imageInlineSizeLimit,\n+                },\n+              },\n+            },\n+            // \"url\" loader works like \"file\" loader except that it embeds assets\n+            // smaller than specified limit in bytes as data URLs to avoid requests.\n+            // A missing `test` is equivalent to a match.\n+            {\n+              test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n+              type: 'asset',\n+              parser: {\n+                dataUrlCondition: {\n+                  maxSize: imageInlineSizeLimit,\n+                },\n+              },\n+            },\n+            {\n+              test: /\\.svg$/,\n+              use: [\n+                {\n+                  loader: require.resolve('@svgr/webpack'),\n+                  options: {\n+                    prettier: false,\n+                    svgo: false,\n+                    svgoConfig: {\n+                      plugins: [{ removeViewBox: false }],\n+                    },\n+                    titleProp: true,\n+                    ref: true,\n+                  },\n+                },\n+                {\n+                  loader: require.resolve('file-loader'),\n+                  options: {\n+                    name: 'static/media/[name].[hash].[ext]',\n+                  },\n+                },\n+              ],\n+              issuer: {\n+                and: [/\\.(ts|tsx|js|jsx|md|mdx)$/],\n+              },\n+            },\n+            // Process application JS with Babel.\n+            // The preset includes JSX, Flow, TypeScript, and some ESnext features.\n+            {\n+              test: /\\.(js|mjs|jsx|ts|tsx)$/,\n+              include: paths.appSrc,\n+              loader: require.resolve('babel-loader'),\n+              options: {\n+                customize: require.resolve(\n+                  'babel-preset-react-app/webpack-overrides'\n+                ),\n+                presets: [\n+                  [\n+                    require.resolve('babel-preset-react-app'),\n+                    {\n+                      runtime: hasJsxRuntime ? 'automatic' : 'classic',\n+                    },\n+                  ],\n+                ],\n+                // @remove-on-eject-begin\n+                babelrc: false,\n+                configFile: false,\n+                // Make sure we have a unique cache identifier, erring on the\n+                // side of caution.\n+                // We remove this when the user ejects because the default\n+                // is sane and uses Babel options. Instead of options, we use\n+                // the react-scripts and babel-preset-react-app versions.\n+                cacheIdentifier: getCacheIdentifier(\n+                  isEnvProduction\n+                    ? 'production'\n+                    : isEnvDevelopment && 'development',\n+                  [\n+                    'babel-plugin-named-asset-import',\n+                    'babel-preset-react-app',\n+                    'react-dev-utils',\n+                    'react-scripts',\n+                  ]\n+                ),\n+                // @remove-on-eject-end\n+                plugins: [\n+                  isEnvDevelopment &&\n+                    shouldUseReactRefresh &&\n+                    require.resolve('react-refresh/babel'),\n+                ].filter(Boolean),\n+                // This is a feature of `babel-loader` for webpack (not Babel itself).\n+                // It enables caching results in ./node_modules/.cache/babel-loader/\n+                // directory for faster rebuilds.\n+                cacheDirectory: true,\n+                // See #6846 for context on why cacheCompression is disabled\n+                cacheCompression: false,\n+                compact: isEnvProduction,\n+              },\n+            },\n+            // Process any JS outside of the app with Babel.\n+            // Unlike the application JS, we only compile the standard ES features.\n+            {\n+              test: /\\.(js|mjs)$/,\n+              exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n+              loader: require.resolve('babel-loader'),\n+              options: {\n+                babelrc: false,\n+                configFile: false,\n+                compact: false,\n+                presets: [\n+                  [\n+                    require.resolve('babel-preset-react-app/dependencies'),\n+                    { helpers: true },\n+                  ],\n+                ],\n+                cacheDirectory: true,\n+                // See #6846 for context on why cacheCompression is disabled\n+                cacheCompression: false,\n+                // @remove-on-eject-begin\n+                cacheIdentifier: getCacheIdentifier(\n+                  isEnvProduction\n+                    ? 'production'\n+                    : isEnvDevelopment && 'development',\n+                  [\n+                    'babel-plugin-named-asset-import',\n+                    'babel-preset-react-app',\n+                    'react-dev-utils',\n+                    'react-scripts',\n+                  ]\n+                ),\n+                // @remove-on-eject-end\n+                // Babel sourcemaps are needed for debugging into node_modules\n+                // code.  Without the options below, debuggers like VSCode\n+                // show incorrect code and set breakpoints on the wrong lines.\n+                sourceMaps: shouldUseSourceMap,\n+                inputSourceMap: shouldUseSourceMap,\n+              },\n+            },\n+            // \"postcss\" loader applies autoprefixer to our CSS.\n+            // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n+            // \"style\" loader turns CSS into JS modules that inject <style> tags.\n+            // In production, we use MiniCSSExtractPlugin to extract that CSS\n+            // to a file, but in development \"style\" loader enables hot editing\n+            // of CSS.\n+            // By default we support CSS Modules with the extension .module.css\n+            {\n+              test: cssRegex,\n+              exclude: cssModuleRegex,\n+              use: getStyleLoaders({\n+                importLoaders: 1,\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                modules: {\n+                  mode: 'icss',\n+                },\n+              }),\n+              // Don't consider CSS imports dead code even if the\n+              // containing package claims to have no side effects.\n+              // Remove this when webpack adds a warning or an error for this.\n+              // See https://github.com/webpack/webpack/issues/6571\n+              sideEffects: true,\n+            },\n+            // Adds support for CSS Modules (https://github.com/css-modules/css-modules)\n+            // using the extension .module.css\n+            {\n+              test: cssModuleRegex,\n+              use: getStyleLoaders({\n+                importLoaders: 1,\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                modules: {\n+                  mode: 'local',\n+                  getLocalIdent: getCSSModuleLocalIdent,\n+                },\n+              }),\n+            },\n+            // Opt-in support for SASS (using .scss or .sass extensions).\n+            // By default we support SASS Modules with the\n+            // extensions .module.scss or .module.sass\n+            {\n+              test: sassRegex,\n+              exclude: sassModuleRegex,\n+              use: getStyleLoaders(\n+                {\n+                  importLoaders: 3,\n+                  sourceMap: isEnvProduction\n+                    ? shouldUseSourceMap\n+                    : isEnvDevelopment,\n+                  modules: {\n+                    mode: 'icss',\n+                  },\n+                },\n+                'sass-loader'\n+              ),\n+              // Don't consider CSS imports dead code even if the\n+              // containing package claims to have no side effects.\n+              // Remove this when webpack adds a warning or an error for this.\n+              // See https://github.com/webpack/webpack/issues/6571\n+              sideEffects: true,\n+            },\n+            // Adds support for CSS Modules, but using SASS\n+            // using the extension .module.scss or .module.sass\n+            {\n+              test: sassModuleRegex,\n+              use: getStyleLoaders(\n+                {\n+                  importLoaders: 3,\n+                  sourceMap: isEnvProduction\n+                    ? shouldUseSourceMap\n+                    : isEnvDevelopment,\n+                  modules: {\n+                    mode: 'local',\n+                    getLocalIdent: getCSSModuleLocalIdent,\n+                  },\n+                },\n+                'sass-loader'\n+              ),\n+            },\n+            // \"file\" loader makes sure those assets get served by WebpackDevServer.\n+            // When you `import` an asset, you get its (virtual) filename.\n+            // In production, they would get copied to the `build` folder.\n+            // This loader doesn't use a \"test\" so it will catch all modules\n+            // that fall through the other loaders.\n+            {\n+              // Exclude `js` files to keep \"css\" loader working as it injects\n+              // its runtime that would otherwise be processed through \"file\" loader.\n+              // Also exclude `html` and `json` extensions so they get processed\n+              // by webpacks internal loaders.\n+              exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n+              type: 'asset/resource',\n+            },\n+            // ** STOP ** Are you adding a new loader?\n+            // Make sure to add the new loader(s) before the \"file\" loader.\n+          ],\n+        },\n+      ].filter(Boolean),\n+    },\n+    plugins: [\n+      // Generates an `index.html` file with the <script> injected.\n+      new HtmlWebpackPlugin(\n+        Object.assign(\n+          {},\n+          {\n+            inject: true,\n+            template: paths.appHtml,\n+          },\n+          isEnvProduction\n+            ? {\n+                minify: {\n+                  removeComments: true,\n+                  collapseWhitespace: true,\n+                  removeRedundantAttributes: true,\n+                  useShortDoctype: true,\n+                  removeEmptyAttributes: true,\n+                  removeStyleLinkTypeAttributes: true,\n+                  keepClosingSlash: true,\n+                  minifyJS: true,\n+                  minifyCSS: true,\n+                  minifyURLs: true,\n+                },\n+              }\n+            : undefined\n+        )\n+      ),\n+      // Inlines the webpack runtime script. This script is too small to warrant\n+      // a network request.\n+      // https://github.com/facebook/create-react-app/issues/5358\n+      isEnvProduction &&\n+        shouldInlineRuntimeChunk &&\n+        new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime-.+[.]js/]),\n+      // Makes some environment variables available in index.html.\n+      // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n+      // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n+      // It will be an empty string unless you specify \"homepage\"\n+      // in `package.json`, in which case it will be the pathname of that URL.\n+      new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\n+      // This gives some necessary context to module not found errors, such as\n+      // the requesting resource.\n+      new ModuleNotFoundPlugin(paths.appPath),\n+      // Makes some environment variables available to the JS code, for example:\n+      // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n+      // It is absolutely essential that NODE_ENV is set to production\n+      // during a production build.\n+      // Otherwise React will be compiled in the very slow development mode.\n+      new webpack.DefinePlugin(env.stringified),\n+      // Experimental hot reloading for React .\n+      // https://github.com/facebook/react/tree/main/packages/react-refresh\n+      isEnvDevelopment &&\n+        shouldUseReactRefresh &&\n+        new ReactRefreshWebpackPlugin({\n+          overlay: false,\n+        }),\n+      // Watcher doesn't work well if you mistype casing in a path so we use\n+      // a plugin that prints an error when you attempt to do this.\n+      // See https://github.com/facebook/create-react-app/issues/240\n+      isEnvDevelopment && new CaseSensitivePathsPlugin(),\n+      isEnvProduction &&\n+        new MiniCssExtractPlugin({\n+          // Options similar to the same options in webpackOptions.output\n+          // both options are optional\n+          filename: 'static/css/[name].[contenthash:8].css',\n+          chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n+        }),\n+      // Generate an asset manifest file with the following content:\n+      // - \"files\" key: Mapping of all asset filenames to their corresponding\n+      //   output file so that tools can pick it up without having to parse\n+      //   `index.html`\n+      // - \"entrypoints\" key: Array of files which are included in `index.html`,\n+      //   can be used to reconstruct the HTML if necessary\n+      new WebpackManifestPlugin({\n+        fileName: 'asset-manifest.json',\n+        publicPath: paths.publicUrlOrPath,\n+        generate: (seed, files, entrypoints) => {\n+          const manifestFiles = files.reduce((manifest, file) => {\n+            manifest[file.name] = file.path;\n+            return manifest;\n+          }, seed);\n+          const entrypointFiles = entrypoints.main.filter(\n+            fileName => !fileName.endsWith('.map')\n+          );\n+\n+          return {\n+            files: manifestFiles,\n+            entrypoints: entrypointFiles,\n+          };\n+        },\n+      }),\n+      // Moment.js is an extremely popular library that bundles large locale files\n+      // by default due to how webpack interprets its code. This is a practical\n+      // solution that requires the user to opt into importing specific locales.\n+      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\n+      // You can remove this if you don't use Moment.js:\n+      new webpack.IgnorePlugin({\n+        resourceRegExp: /^\\.\\/locale$/,\n+        contextRegExp: /moment$/,\n+      }),\n+      // Generate a service worker script that will precache, and keep up to date,\n+      // the HTML & assets that are part of the webpack build.\n+      isEnvProduction &&\n+        fs.existsSync(swSrc) &&\n+        new WorkboxWebpackPlugin.InjectManifest({\n+          swSrc,\n+          dontCacheBustURLsMatching: /\\.[0-9a-f]{8}\\./,\n+          exclude: [/\\.map$/, /asset-manifest\\.json$/, /LICENSE/],\n+          // Bump up the default maximum size (2mb) that's precached,\n+          // to make lazy-loading failure scenarios less likely.\n+          // See https://github.com/cra-template/pwa/issues/13#issuecomment-722667270\n+          maximumFileSizeToCacheInBytes: 5 * 1024 * 1024,\n+        }),\n+      // TypeScript type checking\n+      useTypeScript &&\n+        new ForkTsCheckerWebpackPlugin({\n+          async: isEnvDevelopment,\n+          typescript: {\n+            typescriptPath: resolve.sync('typescript', {\n+              basedir: paths.appNodeModules,\n+            }),\n+            configOverwrite: {\n+              compilerOptions: {\n+                sourceMap: isEnvProduction\n+                  ? shouldUseSourceMap\n+                  : isEnvDevelopment,\n+                skipLibCheck: true,\n+                inlineSourceMap: false,\n+                declarationMap: false,\n+                noEmit: true,\n+                incremental: true,\n+                tsBuildInfoFile: paths.appTsBuildInfoFile,\n+              },\n+            },\n+            context: paths.appPath,\n+            diagnosticOptions: {\n+              syntactic: true,\n+            },\n+            mode: 'write-references',\n+            // profile: true,\n+          },\n+          issue: {\n+            // This one is specifically to match during CI tests,\n+            // as micromatch doesn't match\n+            // '../cra-template-typescript/template/src/App.tsx'\n+            // otherwise.\n+            include: [\n+              { file: '../**/src/**/*.{ts,tsx}' },\n+              { file: '**/src/**/*.{ts,tsx}' },\n+            ],\n+            exclude: [\n+              { file: '**/src/**/__tests__/**' },\n+              { file: '**/src/**/?(*.){spec|test}.*' },\n+              { file: '**/src/setupProxy.*' },\n+              { file: '**/src/setupTests.*' },\n+            ],\n+          },\n+          logger: {\n+            infrastructure: 'silent',\n+          },\n+        }),\n+      !disableESLintPlugin &&\n+        new ESLintPlugin({\n+          // Plugin options\n+          extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],\n+          formatter: require.resolve('react-dev-utils/eslintFormatter'),\n+          eslintPath: require.resolve('eslint'),\n+          failOnError: !(isEnvDevelopment && emitErrorsAsWarnings),\n+          context: paths.appSrc,\n+          cache: true,\n+          cacheLocation: path.resolve(\n+            paths.appNodeModules,\n+            '.cache/.eslintcache'\n+          ),\n+          // ESLint class options\n+          cwd: paths.appPath,\n+          resolvePluginsRelativeTo: __dirname,\n+          baseConfig: {\n+            extends: [require.resolve('eslint-config-react-app/base')],\n+            rules: {\n+              ...(!hasJsxRuntime && {\n+                'react/react-in-jsx-scope': 'error',\n+              }),\n+            },\n+          },\n+        }),\n+    ].filter(Boolean),\n+    // Turn off performance processing because we utilize\n+    // our own hints via the FileSizeReporter\n+    performance: false,\n+  };\n+};\n"
                },
                {
                    "date": 1695908417913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,10 @@\n       // if there are any conflicts. This matches Node resolution mechanism.\n       // https://github.com/facebook/create-react-app/issues/253\n       fallback: {\n         \"fs\":false,\n-        \"os\"\n+        \"os\": false,\n+        \n       }\n       modules: ['node_modules', paths.appNodeModules].concat(\n         modules.additionalModulePaths || []\n       ),\n"
                },
                {
                    "date": 1695908425944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n       fallback: {\n         \"fs\":false,\n         \"os\": false,\n         \"path\":false\n-      }\n+      }.\n       modules: ['node_modules', paths.appNodeModules].concat(\n         modules.additionalModulePaths || []\n       ),\n       // These are the reasonable defaults supported by the Node ecosystem.\n"
                }
            ],
            "date": 1695908396240,
            "name": "Commit-0",
            "content": "// @remove-on-eject-begin\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// @remove-on-eject-end\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst webpack = require('webpack');\nconst resolve = require('resolve');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\nconst InlineChunkHtmlPlugin = require('react-dev-utils/InlineChunkHtmlPlugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst { WebpackManifestPlugin } = require('webpack-manifest-plugin');\nconst InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nconst WorkboxWebpackPlugin = require('workbox-webpack-plugin');\nconst ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');\nconst getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');\nconst ESLintPlugin = require('eslint-webpack-plugin');\nconst paths = require('./paths');\nconst modules = require('./modules');\nconst getClientEnvironment = require('./env');\nconst ModuleNotFoundPlugin = require('react-dev-utils/ModuleNotFoundPlugin');\nconst ForkTsCheckerWebpackPlugin =\n  process.env.TSC_COMPILE_ON_ERROR === 'true'\n    ? require('react-dev-utils/ForkTsCheckerWarningWebpackPlugin')\n    : require('react-dev-utils/ForkTsCheckerWebpackPlugin');\nconst ReactRefreshWebpackPlugin = require('@pmmmwh/react-refresh-webpack-plugin');\n// @remove-on-eject-begin\nconst getCacheIdentifier = require('react-dev-utils/getCacheIdentifier');\n// @remove-on-eject-end\nconst createEnvironmentHash = require('./webpack/persistentCache/createEnvironmentHash');\n\n// Source maps are resource heavy and can cause out of memory issue for large source files.\nconst shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== 'false';\n\nconst reactRefreshRuntimeEntry = require.resolve('react-refresh/runtime');\nconst reactRefreshWebpackPluginRuntimeEntry = require.resolve(\n  '@pmmmwh/react-refresh-webpack-plugin'\n);\nconst babelRuntimeEntry = require.resolve('babel-preset-react-app');\nconst babelRuntimeEntryHelpers = require.resolve(\n  '@babel/runtime/helpers/esm/assertThisInitialized',\n  { paths: [babelRuntimeEntry] }\n);\nconst babelRuntimeRegenerator = require.resolve('@babel/runtime/regenerator', {\n  paths: [babelRuntimeEntry],\n});\n\n// Some apps do not need the benefits of saving a web request, so not inlining the chunk\n// makes for a smoother build process.\nconst shouldInlineRuntimeChunk = process.env.INLINE_RUNTIME_CHUNK !== 'false';\n\nconst emitErrorsAsWarnings = process.env.ESLINT_NO_DEV_ERRORS === 'true';\nconst disableESLintPlugin = process.env.DISABLE_ESLINT_PLUGIN === 'true';\n\nconst imageInlineSizeLimit = parseInt(\n  process.env.IMAGE_INLINE_SIZE_LIMIT || '10000'\n);\n\n// Check if TypeScript is setup\nconst useTypeScript = fs.existsSync(paths.appTsConfig);\n\n// Check if Tailwind config exists\nconst useTailwind = fs.existsSync(\n  path.join(paths.appPath, 'tailwind.config.js')\n);\n\n// Get the path to the uncompiled service worker (if it exists).\nconst swSrc = paths.swSrc;\n\n// style files regexes\nconst cssRegex = /\\.css$/;\nconst cssModuleRegex = /\\.module\\.css$/;\nconst sassRegex = /\\.(scss|sass)$/;\nconst sassModuleRegex = /\\.module\\.(scss|sass)$/;\n\nconst hasJsxRuntime = (() => {\n  if (process.env.DISABLE_NEW_JSX_TRANSFORM === 'true') {\n    return false;\n  }\n\n  try {\n    require.resolve('react/jsx-runtime');\n    return true;\n  } catch (e) {\n    return false;\n  }\n})();\n\n// This is the production and development configuration.\n// It is focused on developer experience, fast rebuilds, and a minimal bundle.\nmodule.exports = function (webpackEnv) {\n  const isEnvDevelopment = webpackEnv === 'development';\n  const isEnvProduction = webpackEnv === 'production';\n\n  // Variable used for enabling profiling in Production\n  // passed into alias object. Uses a flag if passed into the build command\n  const isEnvProductionProfile =\n    isEnvProduction && process.argv.includes('--profile');\n\n  // We will provide `paths.publicUrlOrPath` to our app\n  // as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n  // Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\n  // Get environment variables to inject into our app.\n  const env = getClientEnvironment(paths.publicUrlOrPath.slice(0, -1));\n\n  const shouldUseReactRefresh = env.raw.FAST_REFRESH;\n\n  // common function to get style loaders\n  const getStyleLoaders = (cssOptions, preProcessor) => {\n    const loaders = [\n      isEnvDevelopment && require.resolve('style-loader'),\n      isEnvProduction && {\n        loader: MiniCssExtractPlugin.loader,\n        // css is located in `static/css`, use '../../' to locate index.html folder\n        // in production `paths.publicUrlOrPath` can be a relative path\n        options: paths.publicUrlOrPath.startsWith('.')\n          ? { publicPath: '../../' }\n          : {},\n      },\n      {\n        loader: require.resolve('css-loader'),\n        options: cssOptions,\n      },\n      {\n        // Options for PostCSS as we reference these options twice\n        // Adds vendor prefixing based on your specified browser support in\n        // package.json\n        loader: require.resolve('postcss-loader'),\n        options: {\n          postcssOptions: {\n            // Necessary for external CSS imports to work\n            // https://github.com/facebook/create-react-app/issues/2677\n            ident: 'postcss',\n            config: false,\n            plugins: !useTailwind\n              ? [\n                  'postcss-flexbugs-fixes',\n                  [\n                    'postcss-preset-env',\n                    {\n                      autoprefixer: {\n                        flexbox: 'no-2009',\n                      },\n                      stage: 3,\n                    },\n                  ],\n                  // Adds PostCSS Normalize as the reset css with default options,\n                  // so that it honors browserslist config in package.json\n                  // which in turn let's users customize the target behavior as per their needs.\n                  'postcss-normalize',\n                ]\n              : [\n                  'tailwindcss',\n                  'postcss-flexbugs-fixes',\n                  [\n                    'postcss-preset-env',\n                    {\n                      autoprefixer: {\n                        flexbox: 'no-2009',\n                      },\n                      stage: 3,\n                    },\n                  ],\n                ],\n          },\n          sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n        },\n      },\n    ].filter(Boolean);\n    if (preProcessor) {\n      loaders.push(\n        {\n          loader: require.resolve('resolve-url-loader'),\n          options: {\n            sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n            root: paths.appSrc,\n          },\n        },\n        {\n          loader: require.resolve(preProcessor),\n          options: {\n            sourceMap: true,\n          },\n        }\n      );\n    }\n    return loaders;\n  };\n\n  return {\n    target: ['browserslist'],\n    // Webpack noise constrained to errors and warnings\n    stats: 'errors-warnings',\n    mode: isEnvProduction ? 'production' : isEnvDevelopment && 'development',\n    // Stop compilation early in production\n    bail: isEnvProduction,\n    devtool: isEnvProduction\n      ? shouldUseSourceMap\n        ? 'source-map'\n        : false\n      : isEnvDevelopment && 'cheap-module-source-map',\n    // These are the \"entry points\" to our application.\n    // This means they will be the \"root\" imports that are included in JS bundle.\n    entry: paths.appIndexJs,\n    output: {\n      // The build folder.\n      path: paths.appBuild,\n      // Add /* filename */ comments to generated require()s in the output.\n      pathinfo: isEnvDevelopment,\n      // There will be one main bundle, and one file per asynchronous chunk.\n      // In development, it does not produce real files.\n      filename: isEnvProduction\n        ? 'static/js/[name].[contenthash:8].js'\n        : isEnvDevelopment && 'static/js/bundle.js',\n      // There are also additional JS chunk files if you use code splitting.\n      chunkFilename: isEnvProduction\n        ? 'static/js/[name].[contenthash:8].chunk.js'\n        : isEnvDevelopment && 'static/js/[name].chunk.js',\n      assetModuleFilename: 'static/media/[name].[hash][ext]',\n      // webpack uses `publicPath` to determine where the app is being served from.\n      // It requires a trailing slash, or the file assets will get an incorrect path.\n      // We inferred the \"public path\" (such as / or /my-project) from homepage.\n      publicPath: paths.publicUrlOrPath,\n      // Point sourcemap entries to original disk location (format as URL on Windows)\n      devtoolModuleFilenameTemplate: isEnvProduction\n        ? info =>\n            path\n              .relative(paths.appSrc, info.absoluteResourcePath)\n              .replace(/\\\\/g, '/')\n        : isEnvDevelopment &&\n          (info => path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')),\n    },\n    cache: {\n      type: 'filesystem',\n      version: createEnvironmentHash(env.raw),\n      cacheDirectory: paths.appWebpackCache,\n      store: 'pack',\n      buildDependencies: {\n        defaultWebpack: ['webpack/lib/'],\n        config: [__filename],\n        tsconfig: [paths.appTsConfig, paths.appJsConfig].filter(f =>\n          fs.existsSync(f)\n        ),\n      },\n    },\n    infrastructureLogging: {\n      level: 'none',\n    },\n    optimization: {\n      minimize: isEnvProduction,\n      minimizer: [\n        // This is only used in production mode\n        new TerserPlugin({\n          terserOptions: {\n            parse: {\n              // We want terser to parse ecma 8 code. However, we don't want it\n              // to apply any minification steps that turns valid ecma 5 code\n              // into invalid ecma 5 code. This is why the 'compress' and 'output'\n              // sections only apply transformations that are ecma 5 safe\n              // https://github.com/facebook/create-react-app/pull/4234\n              ecma: 8,\n            },\n            compress: {\n              ecma: 5,\n              warnings: false,\n              // Disabled because of an issue with Uglify breaking seemingly valid code:\n              // https://github.com/facebook/create-react-app/issues/2376\n              // Pending further investigation:\n              // https://github.com/mishoo/UglifyJS2/issues/2011\n              comparisons: false,\n              // Disabled because of an issue with Terser breaking valid code:\n              // https://github.com/facebook/create-react-app/issues/5250\n              // Pending further investigation:\n              // https://github.com/terser-js/terser/issues/120\n              inline: 2,\n            },\n            mangle: {\n              safari10: true,\n            },\n            // Added for profiling in devtools\n            keep_classnames: isEnvProductionProfile,\n            keep_fnames: isEnvProductionProfile,\n            output: {\n              ecma: 5,\n              comments: false,\n              // Turned on because emoji and regex is not minified properly using default\n              // https://github.com/facebook/create-react-app/issues/2488\n              ascii_only: true,\n            },\n          },\n        }),\n        // This is only used in production mode\n        new CssMinimizerPlugin(),\n      ],\n    },\n    resolve: {\n      // This allows you to set a fallback for where webpack should look for modules.\n      // We placed these paths second because we want `node_modules` to \"win\"\n      // if there are any conflicts. This matches Node resolution mechanism.\n      // https://github.com/facebook/create-react-app/issues/253\n      \n      modules: ['node_modules', paths.appNodeModules].concat(\n        modules.additionalModulePaths || []\n      ),\n      // These are the reasonable defaults supported by the Node ecosystem.\n      // We also include JSX as a common component filename extension to support\n      // some tools, although we do not recommend using it, see:\n      // https://github.com/facebook/create-react-app/issues/290\n      // `web` extension prefixes have been added for better support\n      // for React Native Web.\n      extensions: paths.moduleFileExtensions\n        .map(ext => `.${ext}`)\n        .filter(ext => useTypeScript || !ext.includes('ts')),\n      alias: {\n        // Support React Native Web\n        // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n        'react-native': 'react-native-web',\n        // Allows for better profiling with ReactDevTools\n        ...(isEnvProductionProfile && {\n          'react-dom$': 'react-dom/profiling',\n          'scheduler/tracing': 'scheduler/tracing-profiling',\n        }),\n        ...(modules.webpackAliases || {}),\n      },\n      plugins: [\n        // Prevents users from importing files from outside of src/ (or node_modules/).\n        // This often causes confusion because we only process files within src/ with babel.\n        // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\n        // please link the files into your node_modules/ and let module-resolution kick in.\n        // Make sure your source files are compiled, as they will not be processed in any way.\n        new ModuleScopePlugin(paths.appSrc, [\n          paths.appPackageJson,\n          reactRefreshRuntimeEntry,\n          reactRefreshWebpackPluginRuntimeEntry,\n          babelRuntimeEntry,\n          babelRuntimeEntryHelpers,\n          babelRuntimeRegenerator,\n        ]),\n      ],\n    },\n    module: {\n      strictExportPresence: true,\n      rules: [\n        // Handle node_modules packages that contain sourcemaps\n        shouldUseSourceMap && {\n          enforce: 'pre',\n          exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n          test: /\\.(js|mjs|jsx|ts|tsx|css)$/,\n          loader: require.resolve('source-map-loader'),\n        },\n        {\n          // \"oneOf\" will traverse all following loaders until one will\n          // match the requirements. When no loader matches it will fall\n          // back to the \"file\" loader at the end of the loader list.\n          oneOf: [\n            // TODO: Merge this config once `image/avif` is in the mime-db\n            // https://github.com/jshttp/mime-db\n            {\n              test: [/\\.avif$/],\n              type: 'asset',\n              mimetype: 'image/avif',\n              parser: {\n                dataUrlCondition: {\n                  maxSize: imageInlineSizeLimit,\n                },\n              },\n            },\n            // \"url\" loader works like \"file\" loader except that it embeds assets\n            // smaller than specified limit in bytes as data URLs to avoid requests.\n            // A missing `test` is equivalent to a match.\n            {\n              test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n              type: 'asset',\n              parser: {\n                dataUrlCondition: {\n                  maxSize: imageInlineSizeLimit,\n                },\n              },\n            },\n            {\n              test: /\\.svg$/,\n              use: [\n                {\n                  loader: require.resolve('@svgr/webpack'),\n                  options: {\n                    prettier: false,\n                    svgo: false,\n                    svgoConfig: {\n                      plugins: [{ removeViewBox: false }],\n                    },\n                    titleProp: true,\n                    ref: true,\n                  },\n                },\n                {\n                  loader: require.resolve('file-loader'),\n                  options: {\n                    name: 'static/media/[name].[hash].[ext]',\n                  },\n                },\n              ],\n              issuer: {\n                and: [/\\.(ts|tsx|js|jsx|md|mdx)$/],\n              },\n            },\n            // Process application JS with Babel.\n            // The preset includes JSX, Flow, TypeScript, and some ESnext features.\n            {\n              test: /\\.(js|mjs|jsx|ts|tsx)$/,\n              include: paths.appSrc,\n              loader: require.resolve('babel-loader'),\n              options: {\n                customize: require.resolve(\n                  'babel-preset-react-app/webpack-overrides'\n                ),\n                presets: [\n                  [\n                    require.resolve('babel-preset-react-app'),\n                    {\n                      runtime: hasJsxRuntime ? 'automatic' : 'classic',\n                    },\n                  ],\n                ],\n                // @remove-on-eject-begin\n                babelrc: false,\n                configFile: false,\n                // Make sure we have a unique cache identifier, erring on the\n                // side of caution.\n                // We remove this when the user ejects because the default\n                // is sane and uses Babel options. Instead of options, we use\n                // the react-scripts and babel-preset-react-app versions.\n                cacheIdentifier: getCacheIdentifier(\n                  isEnvProduction\n                    ? 'production'\n                    : isEnvDevelopment && 'development',\n                  [\n                    'babel-plugin-named-asset-import',\n                    'babel-preset-react-app',\n                    'react-dev-utils',\n                    'react-scripts',\n                  ]\n                ),\n                // @remove-on-eject-end\n                plugins: [\n                  isEnvDevelopment &&\n                    shouldUseReactRefresh &&\n                    require.resolve('react-refresh/babel'),\n                ].filter(Boolean),\n                // This is a feature of `babel-loader` for webpack (not Babel itself).\n                // It enables caching results in ./node_modules/.cache/babel-loader/\n                // directory for faster rebuilds.\n                cacheDirectory: true,\n                // See #6846 for context on why cacheCompression is disabled\n                cacheCompression: false,\n                compact: isEnvProduction,\n              },\n            },\n            // Process any JS outside of the app with Babel.\n            // Unlike the application JS, we only compile the standard ES features.\n            {\n              test: /\\.(js|mjs)$/,\n              exclude: /@babel(?:\\/|\\\\{1,2})runtime/,\n              loader: require.resolve('babel-loader'),\n              options: {\n                babelrc: false,\n                configFile: false,\n                compact: false,\n                presets: [\n                  [\n                    require.resolve('babel-preset-react-app/dependencies'),\n                    { helpers: true },\n                  ],\n                ],\n                cacheDirectory: true,\n                // See #6846 for context on why cacheCompression is disabled\n                cacheCompression: false,\n                // @remove-on-eject-begin\n                cacheIdentifier: getCacheIdentifier(\n                  isEnvProduction\n                    ? 'production'\n                    : isEnvDevelopment && 'development',\n                  [\n                    'babel-plugin-named-asset-import',\n                    'babel-preset-react-app',\n                    'react-dev-utils',\n                    'react-scripts',\n                  ]\n                ),\n                // @remove-on-eject-end\n                // Babel sourcemaps are needed for debugging into node_modules\n                // code.  Without the options below, debuggers like VSCode\n                // show incorrect code and set breakpoints on the wrong lines.\n                sourceMaps: shouldUseSourceMap,\n                inputSourceMap: shouldUseSourceMap,\n              },\n            },\n            // \"postcss\" loader applies autoprefixer to our CSS.\n            // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n            // \"style\" loader turns CSS into JS modules that inject <style> tags.\n            // In production, we use MiniCSSExtractPlugin to extract that CSS\n            // to a file, but in development \"style\" loader enables hot editing\n            // of CSS.\n            // By default we support CSS Modules with the extension .module.css\n            {\n              test: cssRegex,\n              exclude: cssModuleRegex,\n              use: getStyleLoaders({\n                importLoaders: 1,\n                sourceMap: isEnvProduction\n                  ? shouldUseSourceMap\n                  : isEnvDevelopment,\n                modules: {\n                  mode: 'icss',\n                },\n              }),\n              // Don't consider CSS imports dead code even if the\n              // containing package claims to have no side effects.\n              // Remove this when webpack adds a warning or an error for this.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n            },\n            // Adds support for CSS Modules (https://github.com/css-modules/css-modules)\n            // using the extension .module.css\n            {\n              test: cssModuleRegex,\n              use: getStyleLoaders({\n                importLoaders: 1,\n                sourceMap: isEnvProduction\n                  ? shouldUseSourceMap\n                  : isEnvDevelopment,\n                modules: {\n                  mode: 'local',\n                  getLocalIdent: getCSSModuleLocalIdent,\n                },\n              }),\n            },\n            // Opt-in support for SASS (using .scss or .sass extensions).\n            // By default we support SASS Modules with the\n            // extensions .module.scss or .module.sass\n            {\n              test: sassRegex,\n              exclude: sassModuleRegex,\n              use: getStyleLoaders(\n                {\n                  importLoaders: 3,\n                  sourceMap: isEnvProduction\n                    ? shouldUseSourceMap\n                    : isEnvDevelopment,\n                  modules: {\n                    mode: 'icss',\n                  },\n                },\n                'sass-loader'\n              ),\n              // Don't consider CSS imports dead code even if the\n              // containing package claims to have no side effects.\n              // Remove this when webpack adds a warning or an error for this.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n            },\n            // Adds support for CSS Modules, but using SASS\n            // using the extension .module.scss or .module.sass\n            {\n              test: sassModuleRegex,\n              use: getStyleLoaders(\n                {\n                  importLoaders: 3,\n                  sourceMap: isEnvProduction\n                    ? shouldUseSourceMap\n                    : isEnvDevelopment,\n                  modules: {\n                    mode: 'local',\n                    getLocalIdent: getCSSModuleLocalIdent,\n                  },\n                },\n                'sass-loader'\n              ),\n            },\n            // \"file\" loader makes sure those assets get served by WebpackDevServer.\n            // When you `import` an asset, you get its (virtual) filename.\n            // In production, they would get copied to the `build` folder.\n            // This loader doesn't use a \"test\" so it will catch all modules\n            // that fall through the other loaders.\n            {\n              // Exclude `js` files to keep \"css\" loader working as it injects\n              // its runtime that would otherwise be processed through \"file\" loader.\n              // Also exclude `html` and `json` extensions so they get processed\n              // by webpacks internal loaders.\n              exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n              type: 'asset/resource',\n            },\n            // ** STOP ** Are you adding a new loader?\n            // Make sure to add the new loader(s) before the \"file\" loader.\n          ],\n        },\n      ].filter(Boolean),\n    },\n    plugins: [\n      // Generates an `index.html` file with the <script> injected.\n      new HtmlWebpackPlugin(\n        Object.assign(\n          {},\n          {\n            inject: true,\n            template: paths.appHtml,\n          },\n          isEnvProduction\n            ? {\n                minify: {\n                  removeComments: true,\n                  collapseWhitespace: true,\n                  removeRedundantAttributes: true,\n                  useShortDoctype: true,\n                  removeEmptyAttributes: true,\n                  removeStyleLinkTypeAttributes: true,\n                  keepClosingSlash: true,\n                  minifyJS: true,\n                  minifyCSS: true,\n                  minifyURLs: true,\n                },\n              }\n            : undefined\n        )\n      ),\n      // Inlines the webpack runtime script. This script is too small to warrant\n      // a network request.\n      // https://github.com/facebook/create-react-app/issues/5358\n      isEnvProduction &&\n        shouldInlineRuntimeChunk &&\n        new InlineChunkHtmlPlugin(HtmlWebpackPlugin, [/runtime-.+[.]js/]),\n      // Makes some environment variables available in index.html.\n      // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n      // <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n      // It will be an empty string unless you specify \"homepage\"\n      // in `package.json`, in which case it will be the pathname of that URL.\n      new InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),\n      // This gives some necessary context to module not found errors, such as\n      // the requesting resource.\n      new ModuleNotFoundPlugin(paths.appPath),\n      // Makes some environment variables available to the JS code, for example:\n      // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n      // It is absolutely essential that NODE_ENV is set to production\n      // during a production build.\n      // Otherwise React will be compiled in the very slow development mode.\n      new webpack.DefinePlugin(env.stringified),\n      // Experimental hot reloading for React .\n      // https://github.com/facebook/react/tree/main/packages/react-refresh\n      isEnvDevelopment &&\n        shouldUseReactRefresh &&\n        new ReactRefreshWebpackPlugin({\n          overlay: false,\n        }),\n      // Watcher doesn't work well if you mistype casing in a path so we use\n      // a plugin that prints an error when you attempt to do this.\n      // See https://github.com/facebook/create-react-app/issues/240\n      isEnvDevelopment && new CaseSensitivePathsPlugin(),\n      isEnvProduction &&\n        new MiniCssExtractPlugin({\n          // Options similar to the same options in webpackOptions.output\n          // both options are optional\n          filename: 'static/css/[name].[contenthash:8].css',\n          chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',\n        }),\n      // Generate an asset manifest file with the following content:\n      // - \"files\" key: Mapping of all asset filenames to their corresponding\n      //   output file so that tools can pick it up without having to parse\n      //   `index.html`\n      // - \"entrypoints\" key: Array of files which are included in `index.html`,\n      //   can be used to reconstruct the HTML if necessary\n      new WebpackManifestPlugin({\n        fileName: 'asset-manifest.json',\n        publicPath: paths.publicUrlOrPath,\n        generate: (seed, files, entrypoints) => {\n          const manifestFiles = files.reduce((manifest, file) => {\n            manifest[file.name] = file.path;\n            return manifest;\n          }, seed);\n          const entrypointFiles = entrypoints.main.filter(\n            fileName => !fileName.endsWith('.map')\n          );\n\n          return {\n            files: manifestFiles,\n            entrypoints: entrypointFiles,\n          };\n        },\n      }),\n      // Moment.js is an extremely popular library that bundles large locale files\n      // by default due to how webpack interprets its code. This is a practical\n      // solution that requires the user to opt into importing specific locales.\n      // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\n      // You can remove this if you don't use Moment.js:\n      new webpack.IgnorePlugin({\n        resourceRegExp: /^\\.\\/locale$/,\n        contextRegExp: /moment$/,\n      }),\n      // Generate a service worker script that will precache, and keep up to date,\n      // the HTML & assets that are part of the webpack build.\n      isEnvProduction &&\n        fs.existsSync(swSrc) &&\n        new WorkboxWebpackPlugin.InjectManifest({\n          swSrc,\n          dontCacheBustURLsMatching: /\\.[0-9a-f]{8}\\./,\n          exclude: [/\\.map$/, /asset-manifest\\.json$/, /LICENSE/],\n          // Bump up the default maximum size (2mb) that's precached,\n          // to make lazy-loading failure scenarios less likely.\n          // See https://github.com/cra-template/pwa/issues/13#issuecomment-722667270\n          maximumFileSizeToCacheInBytes: 5 * 1024 * 1024,\n        }),\n      // TypeScript type checking\n      useTypeScript &&\n        new ForkTsCheckerWebpackPlugin({\n          async: isEnvDevelopment,\n          typescript: {\n            typescriptPath: resolve.sync('typescript', {\n              basedir: paths.appNodeModules,\n            }),\n            configOverwrite: {\n              compilerOptions: {\n                sourceMap: isEnvProduction\n                  ? shouldUseSourceMap\n                  : isEnvDevelopment,\n                skipLibCheck: true,\n                inlineSourceMap: false,\n                declarationMap: false,\n                noEmit: true,\n                incremental: true,\n                tsBuildInfoFile: paths.appTsBuildInfoFile,\n              },\n            },\n            context: paths.appPath,\n            diagnosticOptions: {\n              syntactic: true,\n            },\n            mode: 'write-references',\n            // profile: true,\n          },\n          issue: {\n            // This one is specifically to match during CI tests,\n            // as micromatch doesn't match\n            // '../cra-template-typescript/template/src/App.tsx'\n            // otherwise.\n            include: [\n              { file: '../**/src/**/*.{ts,tsx}' },\n              { file: '**/src/**/*.{ts,tsx}' },\n            ],\n            exclude: [\n              { file: '**/src/**/__tests__/**' },\n              { file: '**/src/**/?(*.){spec|test}.*' },\n              { file: '**/src/setupProxy.*' },\n              { file: '**/src/setupTests.*' },\n            ],\n          },\n          logger: {\n            infrastructure: 'silent',\n          },\n        }),\n      !disableESLintPlugin &&\n        new ESLintPlugin({\n          // Plugin options\n          extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],\n          formatter: require.resolve('react-dev-utils/eslintFormatter'),\n          eslintPath: require.resolve('eslint'),\n          failOnError: !(isEnvDevelopment && emitErrorsAsWarnings),\n          context: paths.appSrc,\n          cache: true,\n          cacheLocation: path.resolve(\n            paths.appNodeModules,\n            '.cache/.eslintcache'\n          ),\n          // ESLint class options\n          cwd: paths.appPath,\n          resolvePluginsRelativeTo: __dirname,\n          baseConfig: {\n            extends: [require.resolve('eslint-config-react-app/base')],\n            rules: {\n              ...(!hasJsxRuntime && {\n                'react/react-in-jsx-scope': 'error',\n              }),\n            },\n          },\n        }),\n    ].filter(Boolean),\n    // Turn off performance processing because we utilize\n    // our own hints via the FileSizeReporter\n    performance: false,\n  };\n};\n"
        }
    ]
}